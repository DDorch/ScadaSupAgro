{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Supervisory Control And Data Acquisition (SCADA) at the hydraulic hall of Montpellier SupAgro Montpellier SupAgro is a National Institute of Further Education in Agricultural Science ( https://www.supagro.fr/web/en/ ). It has a hydraulic hall combining several equipments such as canals ( https://www.supagro.fr/wordpress/supagro-halle-hydraulique/ ). These equipments are supplied with sensors measuring water levels, flow rates, etc. and some actuators such as motorised gate. Architecture of the SCADA At the hydraulic hall, the central node of the SCADA architecture is a Raspberry PI 3 Model B installed with a Raspbian OS (See documentation of installation ). The latter is connected to an Arduino Leonardo which is in charge to collect measurements from water lever sensors on the Canal Riquet. Devices collecting sensor data can be connected to the SCADA by a WIFI connection (RPI-AP Wifi network emitted by the Raspberry PI). A user can interact with the SCADA server via the SupAgro local network (ethernet or WiFi) for getting real time data or registered new data to record. All recorded data are sent to a ThingsBoard IoT platform hosted at the UMR G-EAU and anybody can display realtime data via this platform. Detail of SCADA service scripts The SCADA provides several services which are running scripts programming in python: scada_logger.py records data from the Arduino Leonardo scada_net_datalogger.py records data from devices connected to the RPI-AP Wifi network emitted by the Raspberry PI scada_server.py used for communicate with the SCADA via the SupAgro local network (See the documentation for connection details and for the protocol of communication ) scada_gateway.py sends all the data recorded to the ThingsBoard IoT platform. The thingsboard IoT platform A dashboard of the recorded data with visible at this URL : http://scada.g-eau.net/dashboard/4db16100-f3e9-11e8-9dbf-cbc1e37c11e3?publicId=299cedc0-f3e9-11e8-9dbf-cbc1e37c11e3 Data are displayed in real time on charts as on the Figure below: It's possible to change the time window and to explore historical data. For extracting data from the thingboard IoT platform, use the R script developped here: https://github.com/DDorch/R_thingsboard_export","title":"Supervisory Control And Data Acquisition (SCADA) at the hydraulic hall of Montpellier SupAgro"},{"location":"#supervisory-control-and-data-acquisition-scada-at-the-hydraulic-hall-of-montpellier-supagro","text":"Montpellier SupAgro is a National Institute of Further Education in Agricultural Science ( https://www.supagro.fr/web/en/ ). It has a hydraulic hall combining several equipments such as canals ( https://www.supagro.fr/wordpress/supagro-halle-hydraulique/ ). These equipments are supplied with sensors measuring water levels, flow rates, etc. and some actuators such as motorised gate.","title":"Supervisory Control And Data Acquisition (SCADA) at the hydraulic hall of Montpellier SupAgro"},{"location":"#architecture-of-the-scada","text":"At the hydraulic hall, the central node of the SCADA architecture is a Raspberry PI 3 Model B installed with a Raspbian OS (See documentation of installation ). The latter is connected to an Arduino Leonardo which is in charge to collect measurements from water lever sensors on the Canal Riquet. Devices collecting sensor data can be connected to the SCADA by a WIFI connection (RPI-AP Wifi network emitted by the Raspberry PI). A user can interact with the SCADA server via the SupAgro local network (ethernet or WiFi) for getting real time data or registered new data to record. All recorded data are sent to a ThingsBoard IoT platform hosted at the UMR G-EAU and anybody can display realtime data via this platform.","title":"Architecture of the SCADA"},{"location":"#detail-of-scada-service-scripts","text":"The SCADA provides several services which are running scripts programming in python: scada_logger.py records data from the Arduino Leonardo scada_net_datalogger.py records data from devices connected to the RPI-AP Wifi network emitted by the Raspberry PI scada_server.py used for communicate with the SCADA via the SupAgro local network (See the documentation for connection details and for the protocol of communication ) scada_gateway.py sends all the data recorded to the ThingsBoard IoT platform.","title":"Detail of SCADA service scripts"},{"location":"#the-thingsboard-iot-platform","text":"A dashboard of the recorded data with visible at this URL : http://scada.g-eau.net/dashboard/4db16100-f3e9-11e8-9dbf-cbc1e37c11e3?publicId=299cedc0-f3e9-11e8-9dbf-cbc1e37c11e3 Data are displayed in real time on charts as on the Figure below: It's possible to change the time window and to explore historical data. For extracting data from the thingboard IoT platform, use the R script developped here: https://github.com/DDorch/R_thingsboard_export","title":"The thingsboard IoT platform"},{"location":"development_requirements/","text":"Development requirements Installation of MkDocs Documentation of the SCADA is in MkDocs format (https://www.mkdocs.org/). The documentation displays on github needs to install MkDocs and some extensions: sudo apt install python3-pip python3 -m pip install mkdocs python3 -m pip install python-markdown-math python3 -m pip install mkdocs-material Displaying documentation locally Type one of these commands: mkdocs serve python3 -m mkdocs serve Deploying documentation on github After committing the source of the doc to the master branch of the github repository, type one of these commands: mkdocs gh-deploy python3 -m mkdocs gh-deploy The URL of the documentation is: https://ddorch.github.io/Scada_DDorch/","title":"Development requirements"},{"location":"development_requirements/#development-requirements","text":"","title":"Development requirements"},{"location":"development_requirements/#installation-of-mkdocs","text":"Documentation of the SCADA is in MkDocs format (https://www.mkdocs.org/). The documentation displays on github needs to install MkDocs and some extensions: sudo apt install python3-pip python3 -m pip install mkdocs python3 -m pip install python-markdown-math python3 -m pip install mkdocs-material","title":"Installation of MkDocs"},{"location":"development_requirements/#displaying-documentation-locally","text":"Type one of these commands: mkdocs serve python3 -m mkdocs serve","title":"Displaying documentation locally"},{"location":"development_requirements/#deploying-documentation-on-github","text":"After committing the source of the doc to the master branch of the github repository, type one of these commands: mkdocs gh-deploy python3 -m mkdocs gh-deploy The URL of the documentation is: https://ddorch.github.io/Scada_DDorch/","title":"Deploying documentation on github"},{"location":"network_devices/","text":"Local network devices A network device is a device that will send data to the SCADA server via local network. At the SupAgro Hydraulics hall, the available networks are the WiFi and Ethernet networks, and the WiFi network emitted by the SCADA server which is a Raspberry PI 3 Model B. The device can be a computer or a microcontroller (Arduino...) with network communication facilities (Ethernet or WiFi shield). It can be connected to one or more sensors (or other data sources) which provides the data to send. Declare a new network device Connect to the SCADA server via telnet and use the NET instruction to declare or modify a device. NET <DeviceID> <Number of sensors> In return, the server send an access token. This access token is a secret key that will be used after for sending data to the scada. Example for declaring a flow-meter which collect one data, type : NET FLOWMETER_LIROU 1 The server will respond: Network device FLOWMETER_LIROU created with 1 variable(s): - FLOWMETER_LIROU_0 Access token: Sto2aBlhE9rU1l0ogISP Send a data to the SCADA Data are sent by http request. The URL used for sending data should have this format: http://SCADA_SERVER:PORT/ACCESS_TOKEN/VALUE1/.../VALUEn With : SCADA_SERVER: Domain name or IP address of SCADA server PORT: Server listening port ACCESS_TOKEN: the secret key given by the SCADA server for this device VALUE1: the first value to send VALUEn: the n th value to send Example for the flow-meter created above and a server with the IP address 192.168.200.1 listening on port 34060 sending a discharge of 25.31 L/s: http://192.168.200.1:34060/Sto2aBlhE9rU1l0ogISP/25.31","title":"Local network devices"},{"location":"network_devices/#local-network-devices","text":"A network device is a device that will send data to the SCADA server via local network. At the SupAgro Hydraulics hall, the available networks are the WiFi and Ethernet networks, and the WiFi network emitted by the SCADA server which is a Raspberry PI 3 Model B. The device can be a computer or a microcontroller (Arduino...) with network communication facilities (Ethernet or WiFi shield). It can be connected to one or more sensors (or other data sources) which provides the data to send.","title":"Local network devices"},{"location":"network_devices/#declare-a-new-network-device","text":"Connect to the SCADA server via telnet and use the NET instruction to declare or modify a device. NET <DeviceID> <Number of sensors> In return, the server send an access token. This access token is a secret key that will be used after for sending data to the scada. Example for declaring a flow-meter which collect one data, type : NET FLOWMETER_LIROU 1 The server will respond: Network device FLOWMETER_LIROU created with 1 variable(s): - FLOWMETER_LIROU_0 Access token: Sto2aBlhE9rU1l0ogISP","title":"Declare a new network device"},{"location":"network_devices/#send-a-data-to-the-scada","text":"Data are sent by http request. The URL used for sending data should have this format: http://SCADA_SERVER:PORT/ACCESS_TOKEN/VALUE1/.../VALUEn With : SCADA_SERVER: Domain name or IP address of SCADA server PORT: Server listening port ACCESS_TOKEN: the secret key given by the SCADA server for this device VALUE1: the first value to send VALUEn: the n th value to send Example for the flow-meter created above and a server with the IP address 192.168.200.1 listening on port 34060 sending a discharge of 25.31 L/s: http://192.168.200.1:34060/Sto2aBlhE9rU1l0ogISP/25.31","title":"Send a data to the SCADA"},{"location":"Installation/00-SCADA_services/","text":"Installation of SCADA services on the Raspberry PI Install python scripts and dependencies SCADA services are python script running on the Raspberry PI. All the script are written in Python 3. For installing the SCADA services, you should first open an SSH connection to the Raspberry PI . Download the scripts on GitHub with these instructions: sudo apt-get install git cd /tmp git clone https://github.com/DDorch/Scada_DDorch.git cp -r Scada_DDorch/server /home/pi/server Some dependencies should be installed: sudo python3 -m pip install http.server sudo apt-get install python3-yaml python3-serial Configure the python scripts Copy the file scada_sample.ini to scada.ini : cp /home/pi/server/scada_sample.ini /home/pi/server/scada.ini The configuration of the SCADA is then done by modifying the scada.ini file. nano /home/pi/server/scada.ini Configure log rotation Log files are archived by a linux service called logrotate. We should add a configuration file in the folder /etc/logrotate.d in order to take into account the files produced by the SCADA services. Create a file /etc/logrotate.d/scada with this content: /var/log/scada/server.log { size 1M weekly rotate 4 compress missingok notifempty copytruncate create 644 root root } Solve bug of time synchronization On our Raspbian, the time synchronization didn't work. Since, the Raspberry doesn't have a real time clock, the date and hour are false each time the Raspberry is switched on. We solve this bug by adding a script with the content below: #!/bin/sh i=0;while [ $i -lt 100 ]; do i=$(( i+1 ));sleep 1;ping -c1 www.google.com > /dev/null && break; done sudo date -s \"$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z\" We run it at startup by calling it in /etc/rc.local (don't forget to add a & at the end of the call - See this for details) and we call it once a day by adding a link to this script in the folder /etc/cron.daily . Install a tool for saving SDD card lifetime Log2Ram is a tool for writing log files in RAM instead of disk. This can extends consistently the lifetime of the Raspberry SD card. For installation, follow instructions here : https://github.com/azlux/log2ram By default, log2ram copy the log in the /var/hdd.log folder once a day. If you want to copy them once an hour, type the following command: sudo mv /etc/cron.hourly/log2ram /etc/cron.daily/log2ram Configure startup of the SCADA services To run the service at startup, add a call to the script run_scada in the file /etc/rc.local : echo \"/home/pi/scada/run_scada >> /var/log/scada/run_scada.log\" | sudo tee -a etc/rc.local","title":"Installation of SCADA services on the Raspberry PI"},{"location":"Installation/00-SCADA_services/#installation-of-scada-services-on-the-raspberry-pi","text":"","title":"Installation of SCADA services on the Raspberry PI"},{"location":"Installation/00-SCADA_services/#install-python-scripts-and-dependencies","text":"SCADA services are python script running on the Raspberry PI. All the script are written in Python 3. For installing the SCADA services, you should first open an SSH connection to the Raspberry PI . Download the scripts on GitHub with these instructions: sudo apt-get install git cd /tmp git clone https://github.com/DDorch/Scada_DDorch.git cp -r Scada_DDorch/server /home/pi/server Some dependencies should be installed: sudo python3 -m pip install http.server sudo apt-get install python3-yaml python3-serial","title":"Install python scripts and dependencies"},{"location":"Installation/00-SCADA_services/#configure-the-python-scripts","text":"Copy the file scada_sample.ini to scada.ini : cp /home/pi/server/scada_sample.ini /home/pi/server/scada.ini The configuration of the SCADA is then done by modifying the scada.ini file. nano /home/pi/server/scada.ini","title":"Configure the python scripts"},{"location":"Installation/00-SCADA_services/#configure-log-rotation","text":"Log files are archived by a linux service called logrotate. We should add a configuration file in the folder /etc/logrotate.d in order to take into account the files produced by the SCADA services. Create a file /etc/logrotate.d/scada with this content: /var/log/scada/server.log { size 1M weekly rotate 4 compress missingok notifempty copytruncate create 644 root root }","title":"Configure log rotation"},{"location":"Installation/00-SCADA_services/#solve-bug-of-time-synchronization","text":"On our Raspbian, the time synchronization didn't work. Since, the Raspberry doesn't have a real time clock, the date and hour are false each time the Raspberry is switched on. We solve this bug by adding a script with the content below: #!/bin/sh i=0;while [ $i -lt 100 ]; do i=$(( i+1 ));sleep 1;ping -c1 www.google.com > /dev/null && break; done sudo date -s \"$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z\" We run it at startup by calling it in /etc/rc.local (don't forget to add a & at the end of the call - See this for details) and we call it once a day by adding a link to this script in the folder /etc/cron.daily .","title":"Solve bug of time synchronization"},{"location":"Installation/00-SCADA_services/#install-a-tool-for-saving-sdd-card-lifetime","text":"Log2Ram is a tool for writing log files in RAM instead of disk. This can extends consistently the lifetime of the Raspberry SD card. For installation, follow instructions here : https://github.com/azlux/log2ram By default, log2ram copy the log in the /var/hdd.log folder once a day. If you want to copy them once an hour, type the following command: sudo mv /etc/cron.hourly/log2ram /etc/cron.daily/log2ram","title":"Install a tool for saving SDD card lifetime"},{"location":"Installation/00-SCADA_services/#configure-startup-of-the-scada-services","text":"To run the service at startup, add a call to the script run_scada in the file /etc/rc.local : echo \"/home/pi/scada/run_scada >> /var/log/scada/run_scada.log\" | sudo tee -a etc/rc.local","title":"Configure startup of the SCADA services"},{"location":"Installation/03-thingsboard/","text":"ThingsBoard installation The Thingsboard IoT platform ( https://thingsboard.io ) has been installed on a Debian 9 Linux OS. The following installation steps are based on documentation: https://thingsboard.io/docs/user-guide/install/linux/ External database installation We chose to use postgreSQL which seems to require less memory than Cassandra the other database supported by ThingsBoard. For installing and running postgreSQL: sudo apt-get update sudo apt-get install postgresql postgresql-contrib sudo service postgresql start Create user and database for thingsboard: $ sudo -u postgres createuser --interactive Saisir le nom du r\u00f4le \u00e0 ajouter : thingsboard Le nouveau r\u00f4le est-il super-utilisateur ? (o/n) n Le nouveau r\u00f4le est-il autoris\u00e9 \u00e0 cr\u00e9er des bases de donn\u00e9es ? (o/n) n Le nouveau r\u00f4le est-il autoris\u00e9 \u00e0 cr\u00e9er de nouveaux r\u00f4les ? (o/n) n $ sudo -u postgres createdb thingsboard Add a password for user thingsboard ( https://blog.2ndquadrant.com/how-to-safely-change-the-postgres-user-password-via-psql/ ): $ sudo -u thingsboard psql thingsboard=> \\password Saisissez le nouveau mot de passe : Saisissez-le \u00e0 nouveau : thingsboard=> \\q Grant privileges for the user thingsboard ( https://stackoverflow.com/a/22486012 ): $ sudo -u postgres psql postgres=# GRANT CONNECT ON DATABASE thingsboard TO thingsboard; GRANT postgres=# GRANT USAGE ON SCHEMA public TO thingsboard; GRANT postgres=# GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO thingsboard; GRANT postgres=# GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO thingsboard; GRANT postgres=# \\q Installation of thingsBoard Search the link for the last version of thingsboard here: https://github.com/thingsboard/thingsboard/releases Installation steps with version 2.2: cd /tmp wget https://github.com/thingsboard/thingsboard/releases/download/v2.2/thingsboard-2.2.deb sudo dpkg -i thingsboard-2.2.deb sudo /usr/share/thingsboard/bin/install/install.sh Edit configuration file: sudo nano /etc/thingsboard/conf/thingsboard.yml Follow instructions at https://thingsboard.io/docs/user-guide/install/linux/ . On our server, the port has been modified from 8080 to 8082 (8080 and 8081 are already used by other servers). Then start service: sudo service thingsboard start Installation de pgAdmin (aborted) Follow instructions here: https://wiki.postgresql.org/wiki/Apt For installation in server mode ( https://www.pgadmin.org/docs/pgadmin4/3.x/server_deployment.html ): sudo mkdir /var/log/pgadmin sudo chown www-data:www-data /var/log/pgadmin sudo mkdir /var/lib/pgadmin sudo chown www-data:www-data /var/lib/pgadmin sudo apt-get install python-flask python-pip sudo python -m pip install flask-babelex sudo python -m pip install flask-login sudo python -m pip install flask-mail sudo python -m pip install flask-paranoid sudo python -m pip install flask-security sudo python -m pip install flask-sqlalchemy sudo python -m pip install dateutil sudo python -m pip install flask_migrate sudo apt-get install python-psycopg2 Aborted after missing dependency \"backports\" which I was enable to find. It seems that another way of installation is approved: https://stackoverflow.com/a/41260478","title":"ThingsBoard installation"},{"location":"Installation/03-thingsboard/#thingsboard-installation","text":"The Thingsboard IoT platform ( https://thingsboard.io ) has been installed on a Debian 9 Linux OS. The following installation steps are based on documentation: https://thingsboard.io/docs/user-guide/install/linux/","title":"ThingsBoard installation"},{"location":"Installation/03-thingsboard/#external-database-installation","text":"We chose to use postgreSQL which seems to require less memory than Cassandra the other database supported by ThingsBoard. For installing and running postgreSQL: sudo apt-get update sudo apt-get install postgresql postgresql-contrib sudo service postgresql start Create user and database for thingsboard: $ sudo -u postgres createuser --interactive Saisir le nom du r\u00f4le \u00e0 ajouter : thingsboard Le nouveau r\u00f4le est-il super-utilisateur ? (o/n) n Le nouveau r\u00f4le est-il autoris\u00e9 \u00e0 cr\u00e9er des bases de donn\u00e9es ? (o/n) n Le nouveau r\u00f4le est-il autoris\u00e9 \u00e0 cr\u00e9er de nouveaux r\u00f4les ? (o/n) n $ sudo -u postgres createdb thingsboard Add a password for user thingsboard ( https://blog.2ndquadrant.com/how-to-safely-change-the-postgres-user-password-via-psql/ ): $ sudo -u thingsboard psql thingsboard=> \\password Saisissez le nouveau mot de passe : Saisissez-le \u00e0 nouveau : thingsboard=> \\q Grant privileges for the user thingsboard ( https://stackoverflow.com/a/22486012 ): $ sudo -u postgres psql postgres=# GRANT CONNECT ON DATABASE thingsboard TO thingsboard; GRANT postgres=# GRANT USAGE ON SCHEMA public TO thingsboard; GRANT postgres=# GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO thingsboard; GRANT postgres=# GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO thingsboard; GRANT postgres=# \\q","title":"External database installation"},{"location":"Installation/03-thingsboard/#installation-of-thingsboard","text":"Search the link for the last version of thingsboard here: https://github.com/thingsboard/thingsboard/releases Installation steps with version 2.2: cd /tmp wget https://github.com/thingsboard/thingsboard/releases/download/v2.2/thingsboard-2.2.deb sudo dpkg -i thingsboard-2.2.deb sudo /usr/share/thingsboard/bin/install/install.sh Edit configuration file: sudo nano /etc/thingsboard/conf/thingsboard.yml Follow instructions at https://thingsboard.io/docs/user-guide/install/linux/ . On our server, the port has been modified from 8080 to 8082 (8080 and 8081 are already used by other servers). Then start service: sudo service thingsboard start","title":"Installation of thingsBoard"},{"location":"Installation/03-thingsboard/#installation-de-pgadmin-aborted","text":"Follow instructions here: https://wiki.postgresql.org/wiki/Apt For installation in server mode ( https://www.pgadmin.org/docs/pgadmin4/3.x/server_deployment.html ): sudo mkdir /var/log/pgadmin sudo chown www-data:www-data /var/log/pgadmin sudo mkdir /var/lib/pgadmin sudo chown www-data:www-data /var/lib/pgadmin sudo apt-get install python-flask python-pip sudo python -m pip install flask-babelex sudo python -m pip install flask-login sudo python -m pip install flask-mail sudo python -m pip install flask-paranoid sudo python -m pip install flask-security sudo python -m pip install flask-sqlalchemy sudo python -m pip install dateutil sudo python -m pip install flask_migrate sudo apt-get install python-psycopg2 Aborted after missing dependency \"backports\" which I was enable to find. It seems that another way of installation is approved: https://stackoverflow.com/a/41260478","title":"Installation de pgAdmin (aborted)"},{"location":"Raspberry_PI/ssh/","text":"Controlling the Raspberry PI Access via SSH console On Windows, use Putty (https://portableapps.com/apps/internet/putty_portable) or the Portable console emulator for Windows cmder (http://cmder.net/). On Linux, the openssh-client is normally installed by default. The IP address of the RPI is 147.99.14.52 and the user name is pi. For putty, refer to RPI documentation (https://www.raspberrypi.org/documentation/remote-access/ssh/windows.md). On cmder or on Linux, type: ssh pi@147.99.14.52 Accept the proposed certificate and type the password of the pi user. You're now connected to the RPI like if you use a screen and a keyboard directly connected to the PI. Shutdown or reboot the RPI Before switch off the power supply of the RPI, it's better to properly shutdown the system in order to avoid SD card damages. Command for shutdown: sudo halt Command for reboot: sudo reboot","title":"Controlling the Raspberry PI"},{"location":"Raspberry_PI/ssh/#controlling-the-raspberry-pi","text":"","title":"Controlling the Raspberry PI"},{"location":"Raspberry_PI/ssh/#access-via-ssh-console","text":"On Windows, use Putty (https://portableapps.com/apps/internet/putty_portable) or the Portable console emulator for Windows cmder (http://cmder.net/). On Linux, the openssh-client is normally installed by default. The IP address of the RPI is 147.99.14.52 and the user name is pi. For putty, refer to RPI documentation (https://www.raspberrypi.org/documentation/remote-access/ssh/windows.md). On cmder or on Linux, type: ssh pi@147.99.14.52 Accept the proposed certificate and type the password of the pi user. You're now connected to the RPI like if you use a screen and a keyboard directly connected to the PI.","title":"Access via SSH console"},{"location":"Raspberry_PI/ssh/#shutdown-or-reboot-the-rpi","text":"Before switch off the power supply of the RPI, it's better to properly shutdown the system in order to avoid SD card damages. Command for shutdown: sudo halt Command for reboot: sudo reboot","title":"Shutdown or reboot the RPI"},{"location":"SCADA_server/connection/","text":"Connection to SCADA server The server is reachable by telnet protocol on port 443. Under Linux, use the command line TELNET 147.99.14.52 443 . Under Windows, use Putty ( https://portableapps.com/apps/internet/putty_portable ). in the field \"Host Name (or IP address)\", type 147.99.14.52 in the field \"Port\", type 443 Choose the protocol \"Raw\" And clic on the \"Open\" button The following message should appear on the screen: ************************************************************************ * SupAgro SCADA server v2018 * * UMR G-EAU, Irstea, SupAgro, David Dorchies, david.dorchies@irstea.fr * ************************************************************************ Connection opened. Please type an instruction or HELP for getting the list of available instructions. Refer to the protocol documentation for interacting with the server.","title":"Connection to SCADA server"},{"location":"SCADA_server/connection/#connection-to-scada-server","text":"The server is reachable by telnet protocol on port 443. Under Linux, use the command line TELNET 147.99.14.52 443 . Under Windows, use Putty ( https://portableapps.com/apps/internet/putty_portable ). in the field \"Host Name (or IP address)\", type 147.99.14.52 in the field \"Port\", type 443 Choose the protocol \"Raw\" And clic on the \"Open\" button The following message should appear on the screen: ************************************************************************ * SupAgro SCADA server v2018 * * UMR G-EAU, Irstea, SupAgro, David Dorchies, david.dorchies@irstea.fr * ************************************************************************ Connection opened. Please type an instruction or HELP for getting the list of available instructions. Refer to the protocol documentation for interacting with the server.","title":"Connection to SCADA server"},{"location":"SCADA_server/protocol/","text":"SCADA server protocol List of available instructions CLOSE: Gracefully close the socket connection with the server DEF: Create or update a variable in the SCADA database DEL: Delete a variable from the database EXIT: Gracefully close the socket connection with the server GET: Return list of data from the scada logger with record date in UTC and data values separated by semi-colon HELP: Display help on the available instructions LIST: List available variables and local network devices on the SCADA database NET: Declare or update a local network device QUIT: Gracefully close the socket connection with the server Instruction CLOSE Gracefully close the socket connection with the server Instruction DEF Create or update a variable in the SCADA database Usage: DEF type variable description [options] with: type: type of the variable ('ard' for Arduino analog, 'lin' for linear transformation, 'exp' for exponential transformation) variable: the name of the variable to create/update description: a description of the variable (use quotes for more than one word) options: depends on the type of variable to define (see below) Description of variable types: Arduino analog: 'ard' There is no option to provide. Example: DEF ard A0 \"Analog input for sensor #0\" Linear transformation: 'lin' Use an input variable X and apply a linear transformation with the equation Y = a * X + b The 'options' group argument contains 3 arguments in this order: input variable X: the variable used for the calculation coefficient a: slope of the linear equation coefficient b: intercept of the linear equation Example: DEF lin Y0 \"Water depth at sensor #0\" A0 0.001 -0.002 Exponential transformation: 'exp' Use an input variable X and apply this equation Y = a * (X - b) ^ c The 'options' group argument contains 4 arguments in this order: input variable: the variable used for the calculation coefficient a coefficient b coefficient c Example for getting the discharge in l/s using King's triangular weir equation with a sill elevation of 10 cm: DEF exp Q0 \"Discharge at sensor #0\" Y0 0.014 10 2.5 Local network device: 'net' The 'options' group argument contains 2 arguments: device name: the name of the device Order number of the variable on the device from 0 (0 for the first, 1 for the second...) Example for getting the first variable of the device called \"TEST_DEVICE\": DEF net FIRST_DATA \"The first data provided by the device\" TEST_DEVICE 0 Instruction DEL Delete a variable from the database Usage : DEL [variable or local network device name] Instruction EXIT Gracefully close the socket connection with the server Instruction GET Return list of data from the scada logger with record date in UTC and data values separated by semi-colon Usage: GET var1,var2 Example: GET R0,R1 returns 2018-10-22 11:50:53,092;58 Instruction HELP Display help on the available instructions Usage: HELP : list of available instructions HELP [instruction] : Documentation of an instruction Instruction LIST List available variables and local network devices on the SCADA database Usage: LIST : list available variables and devices LIST [variable or device name] : display details on a variable or a device Instruction NET Declare or update a local network device Usage: NET device_name description number_of_variables With: - device_name: the name of the device (used after for declaring a variable with DEF net. See HELP DEF.) - description: Description of the device for human beings :) - number_of_variables: number of variables provided by the device To define variables linked to the device, use the instruction DEF net... Instruction QUIT Gracefully close the socket connection with the server","title":"SCADA server protocol"},{"location":"SCADA_server/protocol/#scada-server-protocol","text":"","title":"SCADA server protocol"},{"location":"SCADA_server/protocol/#list-of-available-instructions","text":"CLOSE: Gracefully close the socket connection with the server DEF: Create or update a variable in the SCADA database DEL: Delete a variable from the database EXIT: Gracefully close the socket connection with the server GET: Return list of data from the scada logger with record date in UTC and data values separated by semi-colon HELP: Display help on the available instructions LIST: List available variables and local network devices on the SCADA database NET: Declare or update a local network device QUIT: Gracefully close the socket connection with the server","title":"List of available instructions"},{"location":"SCADA_server/protocol/#instruction-close","text":"Gracefully close the socket connection with the server","title":"Instruction CLOSE"},{"location":"SCADA_server/protocol/#instruction-def","text":"Create or update a variable in the SCADA database Usage: DEF type variable description [options] with: type: type of the variable ('ard' for Arduino analog, 'lin' for linear transformation, 'exp' for exponential transformation) variable: the name of the variable to create/update description: a description of the variable (use quotes for more than one word) options: depends on the type of variable to define (see below)","title":"Instruction DEF"},{"location":"SCADA_server/protocol/#description-of-variable-types","text":"","title":"Description of variable types:"},{"location":"SCADA_server/protocol/#arduino-analog-ard","text":"There is no option to provide. Example: DEF ard A0 \"Analog input for sensor #0\"","title":"Arduino analog: 'ard'"},{"location":"SCADA_server/protocol/#linear-transformation-lin","text":"Use an input variable X and apply a linear transformation with the equation Y = a * X + b The 'options' group argument contains 3 arguments in this order: input variable X: the variable used for the calculation coefficient a: slope of the linear equation coefficient b: intercept of the linear equation Example: DEF lin Y0 \"Water depth at sensor #0\" A0 0.001 -0.002","title":"Linear transformation: 'lin'"},{"location":"SCADA_server/protocol/#exponential-transformation-exp","text":"Use an input variable X and apply this equation Y = a * (X - b) ^ c The 'options' group argument contains 4 arguments in this order: input variable: the variable used for the calculation coefficient a coefficient b coefficient c Example for getting the discharge in l/s using King's triangular weir equation with a sill elevation of 10 cm: DEF exp Q0 \"Discharge at sensor #0\" Y0 0.014 10 2.5","title":"Exponential transformation: 'exp'"},{"location":"SCADA_server/protocol/#local-network-device-net","text":"The 'options' group argument contains 2 arguments: device name: the name of the device Order number of the variable on the device from 0 (0 for the first, 1 for the second...) Example for getting the first variable of the device called \"TEST_DEVICE\": DEF net FIRST_DATA \"The first data provided by the device\" TEST_DEVICE 0","title":"Local network device: 'net'"},{"location":"SCADA_server/protocol/#instruction-del","text":"Delete a variable from the database Usage : DEL [variable or local network device name]","title":"Instruction DEL"},{"location":"SCADA_server/protocol/#instruction-exit","text":"Gracefully close the socket connection with the server","title":"Instruction EXIT"},{"location":"SCADA_server/protocol/#instruction-get","text":"Return list of data from the scada logger with record date in UTC and data values separated by semi-colon Usage: GET var1,var2 Example: GET R0,R1 returns 2018-10-22 11:50:53,092;58","title":"Instruction GET"},{"location":"SCADA_server/protocol/#instruction-help","text":"Display help on the available instructions Usage: HELP : list of available instructions HELP [instruction] : Documentation of an instruction","title":"Instruction HELP"},{"location":"SCADA_server/protocol/#instruction-list","text":"List available variables and local network devices on the SCADA database Usage: LIST : list available variables and devices LIST [variable or device name] : display details on a variable or a device","title":"Instruction LIST"},{"location":"SCADA_server/protocol/#instruction-net","text":"Declare or update a local network device Usage: NET device_name description number_of_variables With: - device_name: the name of the device (used after for declaring a variable with DEF net. See HELP DEF.) - description: Description of the device for human beings :) - number_of_variables: number of variables provided by the device To define variables linked to the device, use the instruction DEF net...","title":"Instruction NET"},{"location":"SCADA_server/protocol/#instruction-quit","text":"Gracefully close the socket connection with the server","title":"Instruction QUIT"},{"location":"how_to/modify_arduino_pins/","text":"How to modify the pins used on the Leonardo The pins used should be from the pin A0 to the pin An with n is equal to the number of pins used - 1. On the Leonardo board, analog input are identified as this: A0 to A5 on pins A0 to A5 A6 on pin DIGITAL PWM 4 A7 on pin DIGITAL PWM 6 A8 on pin DIGITAL PWM 8 A9 on pin DIGITAL PWM 9 A10 on pin DIGITAL PWM 10 A11 on pin DIGITAL PWM 12 See Leonardo documentation for details ( https://www.arduino.cc/en/Main/Arduino_BoardLeonardo#documentation ). Update of the Arduino script Check the reading script on the Leonardo ( https://github.com/DDorch/Scada_DDorch/blob/master/arduino/lecture_pin/lecture_pin.ino ) and modify the parameter nb_pins in the first line of the script to the number of pins to listen. Configure the arduino data logger of the scada Edit the file /home/pi/scada/scada.ini In section [DATA_LOGGER] modify parameter pins by giving the number of the analog inputs to measure (0, 1, 2... for inputs A0, A1, A2...). [DATA_LOGGER] ; Acquisition frequency in seconds freq=0.5 ; Minimum of pin's value for recording a log valuemin=60 ; Pin numbers to log (Accepted separators: comma, semicolon, space and tabulation) pins=0,1,2,3,4,5,6,7,8,9,10,11 Configuration on Canal Riquet The pins of the Leonardo Arduino are connected to the sensors figuring on the scheme below: The parameter pins should be equal to: pins=0,1,2,3,7,8,9,10","title":"How to modify the pins used on the Leonardo"},{"location":"how_to/modify_arduino_pins/#how-to-modify-the-pins-used-on-the-leonardo","text":"The pins used should be from the pin A0 to the pin An with n is equal to the number of pins used - 1. On the Leonardo board, analog input are identified as this: A0 to A5 on pins A0 to A5 A6 on pin DIGITAL PWM 4 A7 on pin DIGITAL PWM 6 A8 on pin DIGITAL PWM 8 A9 on pin DIGITAL PWM 9 A10 on pin DIGITAL PWM 10 A11 on pin DIGITAL PWM 12 See Leonardo documentation for details ( https://www.arduino.cc/en/Main/Arduino_BoardLeonardo#documentation ).","title":"How to modify the pins used on the Leonardo"},{"location":"how_to/modify_arduino_pins/#update-of-the-arduino-script","text":"Check the reading script on the Leonardo ( https://github.com/DDorch/Scada_DDorch/blob/master/arduino/lecture_pin/lecture_pin.ino ) and modify the parameter nb_pins in the first line of the script to the number of pins to listen.","title":"Update of the Arduino script"},{"location":"how_to/modify_arduino_pins/#configure-the-arduino-data-logger-of-the-scada","text":"Edit the file /home/pi/scada/scada.ini In section [DATA_LOGGER] modify parameter pins by giving the number of the analog inputs to measure (0, 1, 2... for inputs A0, A1, A2...). [DATA_LOGGER] ; Acquisition frequency in seconds freq=0.5 ; Minimum of pin's value for recording a log valuemin=60 ; Pin numbers to log (Accepted separators: comma, semicolon, space and tabulation) pins=0,1,2,3,4,5,6,7,8,9,10,11","title":"Configure the arduino data logger of the scada"},{"location":"how_to/modify_arduino_pins/#configuration-on-canal-riquet","text":"The pins of the Leonardo Arduino are connected to the sensors figuring on the scheme below: The parameter pins should be equal to: pins=0,1,2,3,7,8,9,10","title":"Configuration on Canal Riquet"}]}